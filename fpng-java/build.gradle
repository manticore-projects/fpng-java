plugins {
    id 'java-library'
    id 'maven-publish'
    id 'signing'
}

group = 'com.manticore-projects.tools'
description = 'Java Wrapper around the native SSE2 optimised FPNG Encoder'

repositories {
    mavenCentral()
}

configurations {
    xmlDoclet
}

dependencies {
    api project(':encoder-java')
    api 'net.java.dev.jna:jna:+'
    api 'net.java.dev.jna:jna-platform:+'

    testImplementation platform('org.junit:junit-bom:+')
    testImplementation 'org.junit.jupiter:junit-jupiter'
    testImplementation 'commons-io:commons-io:+'

    // Java Doc in XML Format
    xmlDoclet 'com.manticore-projects.tools:xml-doclet:+'
}

test {
    beforeSuite {
        copy {
            from '../benchmark/src/test/resources/'
            into 'build/resources/test'
            include '*.png'
        }
    }
    useJUnitPlatform()
}

java {
    withSourcesJar()
    withJavadocJar()

    sourceCompatibility = '1.8'
    targetCompatibility = '1.8'
}

spotless {
    java {
        indentWithSpaces(4)
        eclipse().configFile(  rootProject.file('config/formatter/eclipse-java-google-style.xml') )
    }
}

spotbugsMain {
    reports {
        html {
            enabled = true
            destination = rootProject.file("build/reports/spotbugs/main/spotbugs.html")
            stylesheet = 'fancy-hist.xsl'
        }
    }
}

checkstyle {
    sourceSets = [sourceSets.main, sourceSets.test]
    configFile = rootProject.file('config/checkstyle/checkstyle.xml')
}

tasks.withType(Checkstyle).configureEach {
    reports {
        xml.required = false
        html.required = true
    }
}

jacocoTestReport {
    dependsOn test // tests are required to run before generating the report
    reports {
        xml.required = false
        csv.required = false
        html.outputLocation = layout.buildDirectory.dir('reports/jacoco')
    }
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            //element = 'CLASS'
            limit {
                minimum = 1.00
            }
        }
        rule {
            //element = 'CLASS'
            limit {
                counter = 'LINE'
                value = 'MISSEDCOUNT'
                maximum = 0
            }
        }
    }
}

javadoc {
    if (JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption('html5', true)
    }
    options.addBooleanOption("Xdoclint:none", true)
}

tasks.register('xmldoc', Javadoc) {
    def outFile = reporting.file(
            version.endsWith("-SNAPSHOT")
                    ? "xmlDoclet/javadoc_snapshot.xml"
                    : "xmlDoclet/javadoc_stable.xml"
    )

    def rstFile = reporting.file(
            version.endsWith("-SNAPSHOT")
                    ? "xmlDoclet/javadoc_snapshot.rst"
                    : "xmlDoclet/javadoc_stable.rst"
    )

    source = sourceSets.main.allJava
    // beware: Gradle deletes this folder automatically and there is no switch-off
    destinationDir = reporting.file("xmlDoclet")
    options.docletpath = configurations.xmlDoclet.files as List
    options.doclet = "com.github.markusbernhardt.xmldoclet.XmlDoclet"
    title = "API $version"
    options.addBooleanOption("rst", true)
    options.addBooleanOption("withFloatingToc", Boolean.parseBoolean(System.getenv().getOrDefault("FLOATING_TOC", "true")))
    options.addStringOption("basePackage", "com.manticore.tools")
    options.addStringOption("filename", outFile.getName())

    dependsOn(compileJava)
    doLast {
        copy {
            from rstFile
            into "${projectDir}/src/site/sphinx/"
        }
    }
}

compileJava.dependsOn {
    ':fpng:copyNativeLib'
}

publishing {
    publications {
        mavenJava(MavenPublication) {

            from components.java
            versionMapping {
                usage('java-api') {
                    fromResolutionOf('runtimeClasspath')
                }
                usage('java-runtime') {
                    fromResolutionResult()
                }
            }
            pom {
                name = 'fpng-java'
                description = 'Java Wrapper around the native SSE2 optimized FPNG Encoder'
                url = 'https://manticore-projects.com/JavaFPNG'
                licenses {
                    license {
                        name = 'The GNU Affero General Public License, Version 3.0'
                        url = 'https://www.gnu.org/licenses/agpl-3.0.html#license-text'
                    }
                }
                developers {
                    developer {
                        id = 'are'
                        name = 'Andreas Reichel'
                        email = 'andreas@manticore-projects.com'
                    }
                }
                scm {
                    connection = 'scm:git:https://github.com/manticore-projects/fpng-java.git'
                    developerConnection = 'scm:git:ssh://git@github.com:manticore-projects/fpng-java.git'
                    url = 'https://github.com/manticore-projects/JavaFPNG'
                }
            }
        }
    }

    repositories {
        maven {
            name "ossrh"
            def releasesRepoUrl = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
            def snapshotsRepoUrl = "https://s01.oss.sonatype.org/content/repositories/snapshots/"
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
            credentials(PasswordCredentials)
        }
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/manticore-projects/fpng-java")
            credentials(PasswordCredentials)
        }
    }
}

signing {
    sign publishing.publications.mavenJava
}
