import se.bjurr.gitchangelog.api.GitChangelogApi
import se.bjurr.gitchangelog.plugin.gradle.GitChangelogSemanticVersionTask
import se.bjurr.gitchangelog.plugin.gradle.GitChangelogTask

plugins {
    id "com.diffplug.spotless" version "latest.release"
    id 'org.hidetake.ssh' version "latest.release"
    id "se.bjurr.gitchangelog.git-changelog-gradle-plugin" version "latest.release"
}

group = 'com.manticore-projects.tools'
description = 'Java Wrappers for the native optimized FPNG/FPNGE Encoders'

repositories {
    gradlePluginPortal()
    mavenLocal()
    mavenCentral()

    // Sonatype OSSRH
    maven {
        url = uri('https://s01.oss.sonatype.org/content/repositories/snapshots/')
    }
}

spotless {
    // optional: limit format enforcement to just the files changed by this feature branch
    //ratchetFrom 'origin/main'
    format 'misc', {
        // define the files to apply `misc` to
        target '*.rst', '*.md', '.gitignore'
        ignoreErrorForPath('CHANGELOG.md')

        // define the steps to apply to those files
        trimTrailingWhitespace()
        indentWithSpaces(4) // or spaces. Takes an integer argument if you don't like 4
        endWithNewline()
    }
}

tasks.withType(Checkstyle).configureEach {
    reports {
        xml.required = false
        html.required = true
    }
}

// Optional config if you want to configure versioning
tasks.register('gitChangelogVersionTask', GitChangelogSemanticVersionTask) {
    suffixSnapshot = true;
    majorVersionPattern = "^[Bb]reaking"
    minorVersionPattern = "[Ff]eature"
    patchVersionPattern = "[Ff]ix"
}

tasks.register('gitChangelogTask', GitChangelogTask) {
    fromRepo = file("$projectDir")
    file = new File("${projectDir}/src/site/sphinx/changelog.rst")

    // switch off the formatter since the indentation matters for Mark-down
    // @formatter:off
    templateContent ="""
************************
Changelog
************************


{{#tags}}
{{#ifMatches name "^Unreleased.*"}}
Latest Changes since |FPNG_ENCODER_VERSION|
{{/ifMatches}}
{{#ifMatches name "^(?!Unreleased).*"}}
Version {{name}}
{{/ifMatches}}
=============================================================

 {{#issues}}

  {{#commits}}
   {{#ifMatches messageTitle "^(?!Merge).*"}}
  * **{{{messageTitle}}}**
    
    {{authorName}}, {{commitDate}}
   {{/ifMatches}}
  {{/commits}}

 {{/issues}}
{{/tags}}
"""
    // @formatter:on
}

//def nextVersion = GitChangelogApi.gitChangelogApiBuilder()
//        .withSemanticMajorVersionPattern("^[Bb]reaking")
//        .withSemanticMinorVersionPattern("[Ff]eature")
//        .getNextSemanticVersion();
def nextVersion='0.99.4'

tasks.register('sphinx', Exec) {
    dependsOn(gitChangelogTask, ':fpng-java:xmldoc', ':fpnge-java:xmldoc')

    String PROLOG = """
.. |_| unicode:: U+00A0
    :trim:

.. |FPNG_ENCODER_EMAIL| replace:: support@manticore-projects.com
.. |FPNG_ENCODER_VERSION| replace:: ${version}
.. |FPNG_ENCODER_SNAPSHOT_VERSION| replace:: ${nextVersion}
.. |FPNG_ENCODER_STABLE_VERSION_LINK| raw:: html

    <a href='http://manticore-projects.com/download/${project.name}-${version}/${project.name}-${version}.jar'>${project.name}-${version}.jar</a>

.. |FPNG_ENCODER_SNAPSHOT_VERSION_LINK| raw:: html

    <a href='http://manticore-projects.com/download/${project.name}-${version}/${project.name}-${nextVersion}.jar'>${project.name}-${nextVersion}.jar</a>

"""

    args = [
            "-Dproject=FPNG_JAVA"
            , "-Dcopyright=manticore-projects.com, 2023"
            , "-Dauthor=Andreas Reichel"
            , "-Drelease=${version}"
            , "-Drst_prolog=$PROLOG"
            , "${projectDir}/src/site/sphinx"
            , "${project.buildDir}/sphinx"
    ]

    executable "sphinx-build"

    //store the output instead of printing to the console:
    standardOutput = new ByteArrayOutputStream()

    //extension method stopTomcat.output() can be used to obtain the output:
    ext.output = {
        return standardOutput.toString()
    }
}

remotes {
    webServer {
        host = findProperty("${project.name}.host")
        user = findProperty("${project.name}.username")
        identity = new File("${System.properties['user.home']}/.ssh/id_rsa")
    }
}

tasks.register('upload') {
    doFirst {
        if (findProperty("${project.name}.host") == null) {
            println(
                    """
                Property \"${project.name}.host\' not found.
                Please define \"${project.name}.host\" in the Gradle configuration (e. g. \$HOME/.gradle/gradle.properties.
                """
            )
        }
    }
    doLast {
        ssh.run {
            session(remotes.webServer) {
                def versionStable = version
                execute "mkdir -p download/${project.name}-${versionStable}"
                for (File file: fileTree(include:['*.jar'], dir:"${project.buildDir}/libs").collect()) {
                    put from: file, into: "download/${project.name}-${versionStable}"
                }
            }
        }
    }
}
upload.dependsOn(check, assemble, gitChangelogTask)
